@using BL.Facades
@using Web.Controllers
@model Web.Models.TournamentModel
@{
    ViewBag.Title = "Details";
    var tournamentController = new TournamentController();
    var dropDownHelper = 0;
    var offsetHelper = 0;
    var teamFacade = new TeamFacade();
}
<h2>Details</h2>
<div align="center">
    <h4><b>@Html.DisplayFor(model => model.Name)</b></h4>
    <h4><b>@Html.DisplayFor(model => model.Size)-team</b> tournament</h4>


    @if (!(Model.Size != Model.Matches.Length + 1 || Model.Matches[Model.Matches.Length - 1].WinnerId == null)) {
    <h2>Winner is Team <b>@if (Model.Matches[Model.Matches.Length - 1].WinnerId == Model.Matches[Model.Matches.Length - 1].TeamAId)
                    {
                        <text>***@Model.Matches[Model.Matches.Length - 1].TeamA.TeamName***</text>
                    }
                    else
                    {
                        <text>***@Model.Matches[Model.Matches.Length - 1].TeamB.TeamName***</text>
                    }</b></h2>
    }
    <br>
</div>
@{
    var counter = 0;
}
@using (Html.BeginForm())
{
    <div class="Flex">
        <div style="width: 50%; margin-right: 10%;" align="center">
            @if (Model.Matches.Length >= Model.Size / 2)
            {
                for (int i = 0; i < Model.Size / 4; i++)
                {
                    <text>| @Model.Matches[i].TeamA.TeamName <i class="fa fa-vimeo" aria-hidden="true"></i><i class="fa fa-scribd" aria-hidden="true"></i> @Model.Matches[i].TeamB.TeamName |</text>
                    <i class="fa fa-vimeo" aria-hidden="true"></i><i class="fa fa-scribd" aria-hidden="true"></i>

                }
                <br />
            }
            @if (Model.Matches.Length >= Model.Size * 3 / 4)
            {
                dropDownHelper = Model.Size / 2;
                for (int i = Model.Size / 2; i < Model.Size / 2 + Model.Size / 8; i++)
                {
                    <text>| @Model.Matches[i].TeamA.TeamName <i class="fa fa-vimeo" aria-hidden="true"></i><i class="fa fa-scribd" aria-hidden="true"></i> @Model.Matches[i].TeamB.TeamName |</text>


                }
                <br />
            }
            @if (Model.Matches.Length >= Model.Size * 7 / 8)
            {
                dropDownHelper = Model.Size * 3 / 4;
                for (int i = Model.Size * 3 / 4; i < Model.Size * 3 / 4 + Model.Size / 16; i++)
                {
                    <text>| @Model.Matches[i].TeamA.TeamName <i class="fa fa-vimeo" aria-hidden="true"></i><i class="fa fa-scribd" aria-hidden="true"></i> @Model.Matches[i].TeamB.TeamName |</text>


                }
                <br />
            }
            @if (Model.Size - Model.Matches.Length == 1)
            {
                if (Model.Matches[Model.Matches.Length - 1].WinnerId == null)
                {
                    <text>| @Model.Matches[Model.Matches.Length - 1].TeamA.TeamName |</text>
                    <br />
                    @Html.DropDownListFor(model => model.Teams[counter], new SelectList(
                    new List<string>
                    {
                        Model.Matches[Model.Matches.Length - 1].TeamA.TeamName,
                        Model.Matches[Model.Matches.Length - 1].TeamB.TeamName
                    }.ToArray()))
                    <br />
                    <text>| @Model.Matches[Model.Matches.Length - 1].TeamB.TeamName |</text>
                    <br />
                }
                else
                {
                    if (Model.Matches[Model.Matches.Length - 1].WinnerId == Model.Matches[Model.Matches.Length - 1].TeamAId)
                    {
                        <text>***@Model.Matches[Model.Matches.Length - 1].TeamA.TeamName***</text>
                    }
                    else
                    {

                        <text>***@Model.Matches[Model.Matches.Length - 1].TeamB.TeamName***</text>
                    }
                }
            }
            else
            {
                for (int i = 0; i < Model.Size - Model.Matches.Length; ++i)
                {
                    if (Model.Matches.Length == 0)
                    {
                        var dropdown = tournamentController.DropDownListMaker().ToArray();
                        @Html.DropDownListFor(model => model.Teams[counter], new SelectList(dropdown,
                        (dropdown.Length == 0) ? "" : dropdown[i % dropdown.Length]))
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.Teams[counter], new SelectList(
                        new List<string>
                        {
                            Model.Matches[i + dropDownHelper].TeamA.TeamName,
                            Model.Matches[i + dropDownHelper].TeamB.TeamName
                        }.ToArray()))
                    }
                    counter++;
                    if (counter == (Model.Size - Model.Matches.Length) / 2)
                    {
                        <br /><br /><br /><br /><br /><br /><br /><br />
                    }
                }
            }

            <br />

            @if (Model.Matches.Length >= Model.Size * 7 / 8)
            {
                offsetHelper = Model.Size * 13 / 16;
                for (int i = offsetHelper; i < offsetHelper + Model.Size / 16; i++)
                {
                    <text>| @Model.Matches[i].TeamA.TeamName <i class="fa fa-vimeo" aria-hidden="true"></i><i class="fa fa-scribd" aria-hidden="true"></i> @Model.Matches[i].TeamB.TeamName |</text>
                }

                <br />
            }
            @if (Model.Matches.Length >= Model.Size * 3 / 4)
            {
                offsetHelper = Model.Size * 5 / 8;
                for (int i = offsetHelper; i < offsetHelper + Model.Size / 8; i++)
                {
                    <text>| @Model.Matches[i].TeamA.TeamName <i class="fa fa-vimeo" aria-hidden="true"></i><i class="fa fa-scribd" aria-hidden="true"></i> @Model.Matches[i].TeamB.TeamName |</text>


                }
                <br />
            }
            @if (Model.Matches.Length >= Model.Size / 2)
            {
                offsetHelper = Model.Size / 4;
                for (int i = offsetHelper; i < offsetHelper + Model.Size / 4; i++)
                {
                    <text>| @Model.Matches[i].TeamA.TeamName <i class="fa fa-vimeo" aria-hidden="true"></i><i class="fa fa-scribd" aria-hidden="true"></i> @Model.Matches[i].TeamB.TeamName |</text>


                }
                <br />
            }
            <br />
            <p>
                @Html.ActionLink("Back to Tournaments list", "Tournaments")
            </p>
            @if (User.IsInRole("Admin"))
            {
                <p>
                    @Html.ActionLink("Edit", "Edit", new { id = Model.Id })
                </p>
            }
        </div>
        @if (User.IsInRole("Admin") && (Model.Size != Model.Matches.Length + 1 || Model.Matches[Model.Matches.Length - 1].WinnerId == null))
        {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Next Step" class="btn btn-default" />
                </div>
            </div>
        }
        <table class="table">
            <tr>
                <th>
                    <p>First Team</p>
                </th>
                <th>
                    <p>Second Team</p>
                </th>
                <th>
                    <p>Winning Team</p>
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model.Matches)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.TeamA.TeamName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TeamB.TeamName)
                    </td>
                    <td>
                        @if (item.WinnerId != null)
                        {
                            @Html.DisplayFor(modelItem => teamFacade.GetSpecificTeam((int) item.WinnerId).TeamName)
                        }
                    </td>
                </tr>
            }
        </table>
    </div>
}

